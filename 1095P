fun CoroutineScope.switchMapDeferreds(input: ReceiveChannel<Defered<String>>) = produce<String>{
  var current = input.receive()
  while(isActive)
  {
    val next = select<Deferred<String>?>{
     input.onReceiveCatching{update ->
     update.getOrNull()
     } 
    current.onAwait{value -.
    send(value)
    input.receiveCatching().getOrNull()
    }
    }
    if(next == null){
      println("Channel was closed")
      break
    
    }else{
      current = next
    }
  }
}
fun CoroutineScope.asyncString(str: String, time: Long) = async{
  delay(time)
  str
}
fun main() = runBlocking<Unit>{
  val chan = Channel<Deferred<String>>()
  launch{
    for (s in switchMapDeferreds(chan))
    println(s)
  }
  chan.send(asyncString("BEGIN",100))
  delay(200)
  chan.send(asyncString("Slow",500))
  delay(100)
  chan.send(asyncString("Replace",100))
  delay(500)
  chan.send(asyncString("END",500))
  
  delay(1000)
  chan.close()
  delay(500)
  
  
}
//
dependencies{
  implementation("org.jetbrains.kotlinx:kotlinx:kotlinx-coroutines-core:1.7.3")
}

//
fun main() = runBlocking<Unit>{
  val a = async{
    println("I'm computing part of the answer")
  6
  }
  val b = async{
    println("I'm computing another part of the answer")
    7
  }
  println("The answer is ${a.await() * b.await}")
}
//
fun simple(): Flow<Int> = flow{
  for(i in 1..3){
    delay(100)
    emit(i)
  }
}
//
fun main() = runBlocking{
  simple()
  .collect{value -> 
  delay(300)
  println(value)
  }
}
//
fun main() = runBlocking<Unit>{
  simple()
  .buffer()
  .collect{value->
  delay(300)
  println(value)
  }
}
//
plugins{
  kotlin("jvm")version"1.9.20"
  kotlin("plugin.serialization")version "1.9.20"
}
//
@Serializable
data class Data(val a: Int, val b: String)

fun main(){
  val json = Json.encodeToString(Data(42,"str"))
}
//
val dataList = listOf(Data(42,"str"), Data(12,"test"))
val jsonList = Json.encodeToString(dataList)
//
@Serializable
data class Data(val a: Int, val b: String)

fun main(){
  val obj = Json.decodeFromString<Data>("""{a":42, "b": "str"}""")
}
//
repositories{
  mavenCentral()
}
dependencies{
  testImplementation("org.jetbrains.kotlinx:linckeck:2.23")
}
//
repositories{
  mavenCentral()
}
dependencies{
  testImplementation("org.jetbrains.kotlinx:linckeck:2.23")

  testImplementation("junit:4.13")
}
//
class Counter {
@Volatile
private var value = 0
fun inc(): Int = ++value
fun get() = value
}
class BasicCounterTest {
private val c = Counter() // Initial state
// Operations on the Counter
@Operation
fun inc() = c.inc()
@Operation
fun get() = c.get()
@Test // JUnit
fun stressTest() = StressOptions().check(this::class) // The magic button
}
//

class Counter {
@Volatile
private var value = 0
fun inc(): Int = ++value
fun get() = value
}
class BasicCounterTest {
private val c = Counter()
@Operation
fun inc() = c.inc()
@Operation
fun get() = c.get()
@Test
fun modelCheckingTest() = ModelCheckingOptions().check(this::class)
}

//
class ConcurrentDequeTest{

  private val deque = ConcurrentLinkedDeque<Int>()

  @Operation
  fun addFirst(e: Int) = deque.addFirst(e)
  
  @Operation
  fun addLast(e: Int) = deque.addLast(e)
  
  @Operation
  fun pollFirst() = deque.pollFirst()

  @Operation
  fun pollLast() = deque.addLast()
  
  @Operation
  fun peekFirst() = deque.peekFirst()

  @Operation
  fun peekFirst() = deque.peekLast()

  @Test
  fun modelCheckingTest() = ModelCheckingOptions().check(this::class)
}
//
class Counter{
  @Volatile
  private var value = 0

  fun inc(): Int = ++value
  fun get() =value
}
//

class CounterTest{
  private val c = Counter()

  @Operation
  fun inc() = c.inc()

  @Operation
  fun get() = c.get()

  @Test
  fun stressTest() = StressOptions().check(this::class)
  
}
//
class CounterTest{
  private val c = Counter()

  @Operation
  fun inc() = c.inc()

  @Operation
  fun get() = c.get()

  @Test
  fun modelCheckingTest() = ModelCheckingOptions().check(this::class)

}
//
//
class CounterTest{
  private val c = Counter()

  @Operation
  fun inc() = c.inc()

  @Operation
  fun get() = c.get()

  @Test
fun stressTest() = StressOptions()
.actorsBefore(2)
.threads(2)
.actorsPerThread(2)
.actorsAfter(1)
.iteractions(100)
.invocationPerIteration(1000)
.check(this:class)
}
//
class CounterTest{
  private val c = Counter()

  @Operation
  fun inc() = c.inc()

  @Operation
  fun get() = c.get()

@StateRepresentation
fun stateRepresentation() = c.get().toString()
  
  @Test
  fun stressTest() = StressOptions().check(this::class)

}
//
class MultiMap<K,V>{
  private val map  = ConcurrentHashMap<K, List<V>>()

  fun add(key: K,value:V){
    val list = map[key]
    if(list == null){
      map[key] = listOf(value)
    }else{
      map[key] = list+value
    }
  }
  fun get(key:K ): List<V> = map[key]?: emptyList()
}




//
class MultiMap<K,V>{
  private val map  = ConcurrentHashMap<K, List<V>>()

  fun add(key: K,value:V){
    val list = map[key]
    if(list == null){
      map[key] = listOf(value)
    }else{
      map[key] = list+value
    }
  }
  fun get(key:K ): List<V> = map[key]?: emptyList()
}

@Param(name ="key",gen=IntGen::class, conf = "1:2")
class MultiMapTest{
  private val map = MultiMap<Int, Int>()

  @Operation
  fun add(@Param(name = "key")key: Int, value: Int) = map.add(key,value)

  @Operation
  fun get(@Param(name = "key")key:Int) = map.get(key)

@Test
fun stressTest() = StressOptions().check(this::class)

@Test
fun modelCheckingTest() = ModelCheckingOptions().check(this::class)

}
//
dependencies{
  testImplementation"org.jctools:jctools-core:3.3.0"
}
//

class MPSCQueueTest{
  private val queue = MpscLinkedAtomicQueue<Int>()

  @Operation
  fun offer(x: Int) = queue.offer(x)

  @Operation(nonParallelGroup = "consumers")
  fun poll(): Int? = queue.poll()

  @Operation(nonParallelGroup = "consumers")
  fun peak(): Int? = queue.peak()

  @Test
 fun stressTest () = StressOptions().check(this::class)

 @Test
  fun modelCheckingTest () = ModelCheckingOptions().check(this::class)

}
//
class ConcurrentHashMapTest{
  private val map = ConcurrentHashMap<Int, Int>()

  @Operation
  fun put(key: Int, value: Int) = map.put(key,value)


  @Test
  fun modelCheckingTest() =ModelCheckingOptions()
  .actorsBefore(1)
  .actorsPerThread(1)
  .actorsAfter(0)
  .minimizeFailedScenario(false)
  .checkObstructionFreedom()

  .check(this:class)
}
//
class ConcurrentSkipListMapTest{
  private val map = ConcurrentSkipListMap<Int, Int>()

  @Operation
  fun put(key: Int, value: Int) = map.put(key,value)

  @Test
  fun modelCheckingTest() = ModelCheckingOptions()
  .checkObstructionFreedom()
  .check(this::class)
}
//
class ConcurrentLinkedQueueTest{
  private val s = ConcurrentLinkedQueue<Int>()

  @Operation
  fun add(value: Int) = s.add(value)

  @Operation
  fun poll(): Int? = s.poll()

  @Test
  fun stressTest() = StressOptions()
  .sequentialSpecification(SequentialQueue::class.java)
  .check(this::class)
}

class SequentialQueue{
  private val s = LinkedList<Int>()

  fun add(x: Int) = s.add(x)
  fun poll(): Int? = s.poll()
}
//
plugins{
  kotlin("jvm")version"1.9.20"

  application
  
}

group = "org.example"
version = "1.0-SNAPSHOT"

repositories{
  mavenCentral()
}

dependencies{
  testImplementation(kotlin("test"))
}
tasks.test{
  useJUnitPlatform()
}

kotlin{
  jvmToolchain(17)
}

application{
  mainClass.set("MainKt")
}
//
plugins{
  kotlin("<..>")version"1.9.20"
}
//
sourceSets.main{
  java.srcDirs("src/main/myJava", "src/main/myKotlin")
}
//
tasks.withType<org.jetbrains.kotlin.gradle.tasks.kotlinJvmCompile>().configureEach{
  jvmTargetValidationMode.set(org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode.WARNING)
}
//
kotlin{
  jvmToolchain{
    languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>))
  }
  jvmToolchain(<MAJOR_JDK_VERSION>)

  jvmToolchain(17)
}
//
java{
  toolchain{
    languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>))
  }
}
//
plugins{
  id("org.gradle.toolchains.foojay-resolver-convention")version("0.5.0")
}
//
val service = project.extensions.getByType<JavaToolchainService>()
val customLauncher = service.launcherFor{
  languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION))
}
project.tasks.withType<UsesKotlinJavaToolchain>().configureEach{
  kotlinJavaToolchain.toolchain.use(customLauncher)
}
//
tasks.withType<UseKotlinJavaToolchain>().configureEach{
  KotlinJavaToolchain.jbk.use(
    "/path/to/local/jdk",
    JavaVersion.<LOCAL_JDK_VERSION>
  )
}
//
val integrationTestCompilation = kotlin.target.compilations.create("integrationTest"){
  associateWith(kotlin.target.compilations.getByName("main"))
}
//
java{
  modularity.inferModulePath.set(true)
}
task.named("compileJava", JavaCompile::class.java){
  options.compilerArumentProviders.add(CommandLineArgumentProvider){
    listOf("--patch-module", "YOUR_MODULE_NAME = ${sourceSets["main].output.asPath}")
  })
}
//
tasks.jar(type:Jar){
  from sourceSets.main.outputs
  from sourceSets.main.kotlin.classesDirectories
}
//
plugins{
  kotlin("multiplatform")version"1.9.20"
}
//
kotlin{
  sourceSets{
    main.kotlin.srcDirs += 'src/main/myKotlin'
  }
}
//
project.plugins.withType<KotlinBasePlugin>(){
  
}
//
kotlin{
  sourceSets{
    val commonMain by getting{
      dependencies{
        implementation("com.example: my-library:1.0")
      }
    }
  }
}
//
implementation(platform("org.jetbrains.kotlin:kotlin-bom: 1.9.20"))
//
dependencies{
  constraints{
    add("implementation","org.jetbrains.kotlin:kotlin-stdlib-jdk7"){
      version{
        require("1.9.20")
      }
    }
    add("implementation"," org.jetbrains.kotlin:kotlin-stdlib-jdk8"){
      version{
        require("1.9.20")
      }
    }
  }
}
//
plugins{
  kotlin("<..>")version "1.9.20"
}
//
dependencies{
  implementation("com.example:lib.1.0"){
    exclude(group = "org.jetbrains.kotlin", module = "kotlin-stdlib")
  }
}
//
kotlin{
  sourceSets{
    val commonTest by getting{
      dependencies{
        implementation(kotlin("test"))
      }
    }
    }
}
//
kotlin{
  jvm{
    testRuns["test"].executionTask.configure{
      useJUnitPlatform()
    }
  }
  sourceSets{
    val commonTest by getting{
      dependencies{
        implementation(kotlin("test"))
      }
    }
  }
}
//
dependencies{
  testImplementation(kotlin("test"))
}
tasks{
  test{
    useTestNG()
  }
}
//
kotlin{
  sourceSets{
    val jvmMain by getting{
      dependencies{
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.3")
      }
    }
  }
}
//
kotlin{
  sourceSets{
    val commonMain by getting{
      dependencies{
         implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.3")
      }
    }
  }
}
//
dependencies{
  "commonMainImplementation"(com.example:my-library:1.0")
                             }
                             //
   task.named("compileKotlin", org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask::class.java){
     compilerOptions{
       freeCompilerArgs.add("-Xexport-kdoc")
     }
   }                          
   //
   kotlin{
     compilerOptions{
       apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KoTLIN_2_0))
     }
   }
   //
  task.named("compileKotlin", KotlinCompilationTask)  { 
    compilerOptions{
      suppressWarinings.set(true)
                                }
                              }     
  //
  tasks.named('compileKotlin', KotlinCompilationTask){
    compilerOptions
  }
  //


  val compileKotlin.compilerOptions.freeCompilerArgs.add("-Xexport-kdoc")

  compileKotlin.compilerOptions.freeCompilerArgs.add("-Xe\no-param-assertion")

  compileKotlin.compilerOptions.freeCompilerArgs.addAll(listOf("-Xe\no-param-assertion", "-Xno-call-assertion"))

  //
  tasks
      .withType<org.jetbrains.kotlin.gradle.tasks.KotlinJVmCompile>()
      .configureEach{
        compilerOptions
        .languageVersion
        .set(
          org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOLTIN_@_0
        )
        
      }
      //
      kotlin{
        kotlinDaemonJvmArgs = listOf("-Xmx486m", "Xms256m","-XX:+USeParallelGC")
      }
      //
      task.withType<CompileUsingKotlinDaemon>().configureEach{
        kotlinDaemonJvmArguments.set(listOf("-Xmx486m","-Xms256m","-XX:+UserParallelGC"))
      }
      //
      task.withType<CompileUsingKotlinDaemon>().configureEach{
        compilerExecutionStrategy.set(KotlinCompilerExecutionStrategy.IN_PROCESS)
      }
      .//
      tasks{
        compileKotlin{
          useDaemonFallbackStrategy.set(false)
        }
      }
      //
      configurations.register("customConfiguration"){}
      //
      dependencies{
        customConfiguration("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.20")
      }
      //
      configurations{
        customConfiguration{
          attributes{
            attribute(
             Usage.USAGE_ATTRIBUTE
              project.objects.named(Usage.class, Usage.JAVA_RUNTIME)
            )
            attribute(
              Category(
                Category.CATEGORY_ATTRIBUTE,
                project.objects.named(Category.class, Category.LIBRARY)
              )
              attribute(
                GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE,
                project.objects.named("7.0")
              )
          }
        }
      }
      //
      plugins{
        id("org.jetbrains.dokka")version"1.9.20"
      }
      //
      subproject{
        apply(plugin = "org.jetbrains.dokka")
      }
      //
      tasks.register<Jar>("dokkaHtmlJar"){
        dependOn(tasks.dokkaHtml)
        from(tasks.dokkaHtml.flatMap{it.outputDirectory})
        archiveClassifier.set("html-docs")
      }
      tasks.register<Jar>("dokkaHtmlJar"){
        dependOn(tasks.dokkaJavadoc)
        from(tasks.dokkaJavadoc.flatMap{it.outputDirectory})
        archiveClassifier.set("javadocs")
      }
      //
      
plugins{
  if("org.jetbrains.dokka")version"1.9.20"
}
task.dokkaHtml{
  outputDirectory.set(buildDir.resolve("documentation/html"))
}

tasks.dokkaGfm{
  outputDirectory.set(buildDir.resolve("documentation/markdown"))
}
//
plugins{
  id("org.jetbrains.dokka")version"1.9.20"

tasks.withType<DokkaTask>().configureEach{
  dokkaSourceSets.configureEach{
    documentedVisibilities.set(
    setOf(
      Visibility.public
      Visibility.PROTECTED
    )  
    )
perPackageOption{
  matchingRegex.set(".internal.*")
  suppress.set(true)

      
    }
  }
}
//




  plugins{
    id("org.jetbrains.dokka")version"1.9.20"

    subprojects{
      apply(plugin = "org.jetbrains.dokka")
    
    tasks.dokkaHtmlPartial{
      outputDirectory.set(buildDir.resolve("docs/partial"))
    }

    task.withType<DokkaTaskPartial>().configureEach{
      dokkaSourceSets.configureEach{
        includes.from("README.md")
      }
    }
    }
//
apply(plugin = "org.jetbrains.dokka")

tasks.dokkaHtmlPartial{
  outputDirectory.set(buildDir.resolve("dosc/partial"))
}
//
plugins{
  if("org.jetbrains.dokka")version"1.9.20"


  tasks.dokkaHtmlMultiModule{
    moduleName.set("WHOLE PROJECT NAME USED IN THE HEADER")
  }
  //
  tasks.withType<DokkaTask>().configureEach{
    moduleName.set(project.name)
    moduleVersion.set(project.name)
    outputDirectory.set(buildDir.resolve("dokka/$name"))
    failOnWarning.set(false)
    suppressObviousFunctions.set(true)
    suppressInheritedMemnber.set(false)
    offlineMode.set(false)
  }
  //
  tasks.withType<DokkaTask>().configureEach{

    dokkaSourceSets{
      named("linux"){
        dependsOn("native")
        sourceRoots.from(file("linux/src"))
      }
      configureEach{
        suppress.set(false)
        displayName.set(name)
        documentedVisibilities.set(setOf(Visibility.PUBLIC))
        reportUndocumented.set(false)
        skipEmptyPackages.set(true)
        skipDeprecated.set(false)
        suppressGeneratedFiles.set(true)
        jdkVersion.set(8)
        languageVersion.set("1.7")
        apiVersion.set("1.7")
        noStdlibLink.set(false)
        noJdkLink.set(false)
        noAndroidSdkLink.set(false)
        noJdkLink.set(false)
        noAndroidSdkLink.set(false)
        includes.from(project.files(). "packages.md","extra.md")

        platform.set(Platform.DEFAULT)
        sourceRoots.from(file("src"))
        classpath.from(project.files().file("libs/dependency.jar"))
        samples.from(project.files(), "samples/Basic.kt", "samples/Advanced.kt")

        sourceLink{
          
        }
        externalDocumentationLink{
          
        }
        perPackageOption{
          
        }
      }
    }
  }
  //
  tasks.withType<DokkaTask>().configureEach{

    dokkaSourceSets.configureEach{
      
    }
    sourceLink{
      localDirectory.set(projectDir.resolve("src"))
      remoteUrl.set(URL("https://github.com/kotlin/dokka/tree/master/src"))
      remoteLineSuffix.set("#L")
    }
  }
  //
  tasks.withType<DokkaTask>().configureEach{
    

    dokkaSourceSets.configureEach{

    }
perPackageOption{
  matchingRegex.set(".*api.*"
                   suppress.set(false)
                   skipDeprecated.set(false)
                   reportUndocumented.set(false)
                   documentedVisibilities.set(setOf(Visibility.PUBLIC))
                   
                    }
    }
  }
  //
  tasks.withType<DokkaTask>().configureEach{
    dokkaSourceSets.configureEach{
      externalDocumentationLink{
        url.set(URL("https://kotlinlang.org/api/kotlinx.serialization/"))
        packageListUrl.set(
          rootProject.projectDir.resolve("serialization.package.list")toURL()
        )
        }
    }
  }
  //
  tasks.withType<DokkaTask>().configureEach{
    moduleName.set(project.name)
    moduleVersion.set(project.version.toString())
    outputDirectory.set(buildDir.resolve("dokka/$name"))
    failOnWarning.set(false)
    suppressObviousFunction.set(true)
    suppressInheritedMembers.set(false)
    offlineMode.set(false)

    dokkaSourceSets{
      named("linux"){
        dependsOn("native")
        sourceRoots.from(file("linux/src"))
      }
      configureEach{
        suppress.set(false)
        displayName.set(name)
        documentedVisibilities.set(setOf(Visibility.PUBLIC))
        reportUndocumented.set(false)
        skipEmptyPackages.set(true)
        skipDeprecated.set(false)
        suppressGeneratedFiles.set(true)
        jdkVersion.set(8)
        languageVersion.set("1.7")
        apiVersion.set("1.7")
        noStdlibLink.set(false)
        noJDKLink.set(false)
        noAndroidSdkLink.set(false)
        includes.from(project.files(),"packages.md","extra.md")
        platform.set(Platform.DEFAULT)
        sourceRoots.from(file("src"))
        classpath.from(project.files(). file("libs/dependency.jar"))
        samples.from(project.files(),"samples/basic.kt", "samples/Advanced.kt")

        sourceLink{
          localDirectory.set(projectDir.resolve("src"))
          remoteUrl.set(URL("https://github.com/kotlin/dokka/tree/master/src"))
          remoteLineSuffix.set("#L")
        }

        externalDocumentationLink{
          url.set(URL("https://kotlinlang.org/api/lastest/jvm/stdlib/"))
packageLiatUrl.set(
  rootProject.projectDir.resolve("stdlib.package.list").toURL()
)
          
        }

        perPackageOption{
          matchingRegex.set(".*api.*")
          suppress.set(false)
          skipDeprecated.set(false)
          reportUndocumented.set(false)
          documentedVisibilities.set{
            setOf(
              Visibility.PUBLIC,
              Visibility.private,
              Visibility.protected,
              Visibility.internal,
              Visibility.Package
            )
          }
        }
      }
    }
  }
  //
  buildscript{
    dependencies{
      classpath("org.jetbrains.dokka:dokka-base:1.9.10")
    }
  }

  task.withType<DokkaTask>().configureEach{
    pluginConfiguration<DokkaBase, DokkaBaseConfiguration>{
      customAssets = listOf(file("my-image-png"))
      customStyleSheets = listOf(file("my-styles.css"))
      footerMessage = "(c) 2022 MyOrg"
      separateInheritedMembers = false
      templatesDir = file("dokka/templates")
      mergeImplicitExpectActualDeclarations = false
    }
  }
  //
  dependencies{
    dokkaPlugin("")

    dokkaHtmlPlugin("")

    dokkaHtmlPartialPlugin("")
  }
  //
  buildscript{
    dependencies[
      classpath("org.jetbrains.dokka-base:1.9.10")
    ]
  }

  task.withType<DokkaTask>().configureEach{
    pluginConfiguration<DokkaBase, DokkaBaseConfiguration>{
      customAssets = listOf(file("my-image.png"))
      customStyleSheets = listOf(file("my-style.css"))
      footerMessage = "(c) 2022 myOrg"
    }
  }

  task.withType<DokkaTask>().configureEach{

    val dokkaBaseConfiguration = """

      customAssets = listOf(file("my-image-png"))
      customStyleSheets = listOf(file("my-styles.css"))
      footerMessage = "(c) 2022 MyOrg"

      """

    
   pluginMapConfiguration.set(

     mapOf(
       "org.jetbrains.dokka.base.DokkaBase" to dokka BaseConfiguration
     )
   
    }
  }
  //
  1095P
